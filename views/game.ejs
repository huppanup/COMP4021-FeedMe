<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title> Welcome! </title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <link href="/stylesheets/game.css" rel="stylesheet">
</head>
<body>
    <div id="container" class="col">
        <canvas id="game-area"></canvas>

        <!-- Game Start Countdown -->
        <div id="game-start" class="center start-text">
            <h1 id="countdown">Game Start!</h1>
        </div>


        <!-- Game Over Text -->
        <div id="game-over" class="center end-text hidden">
            <h1>Game Over</h1>
        </div>

        <!-- Results Table -->
        <div id="results-box" class="center results-text hidden">
            <h2>Results</h2>
            <table id="results-table">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Results will be populated dynamically -->
                </tbody>
            </table>
            <h3 id="winner-text">Winner: </h3>
            <button id="restart-game">Restart</button>
        </div>

        <!-- Timer -->
        <div id="timer-box" class="right-top timer-text hidden">
            <span id="timer">Time: 60</span>
        </div>

        <!-- Score -->
        <div id="score-box" class="left-top score-text hidden">
            <span id="score">Score: 0</span>
        </div>
    </div>
    <div id="signin-overlay" class="overlay row"> </div>

    <script src="/scripts/boundingBox.js"></script>
    <script src="/scripts/sprite.js"></script>
    <script src="/scripts/item.js"></script>
    <script src="/scripts/player.js"></script>
    <script src="/scripts/game.js"></script>

    <script>
    const playersData = '<%- JSON.stringify(playersData) %>';
    const settings = '<%- JSON.stringify(settings) %>';
    const user = '<%- JSON.stringify(user) %>';

    $(function() {
        /* Get the canvas and 2D context */
        const canvas = document.getElementById("game-area");
        const ctx = canvas.getContext("2d");

        // Set canvas size using container size
        const container = $('#container');

        canvas.width = container.width();
        canvas.height = container.height();

        let animationFrameId;

        const sounds = {
            background: new Audio("/resources/background.mp3"),
            food: new Audio("/resources/food.mp3"),
            item: new Audio("/resources/collect.mp3"),
            hit: new Audio("/resources/hit.mp3"),
            gameover: new Audio("/resources/gameover.mp3")
        };

        // Create the items
        let items = createItems(ctx, canvas);

        // Create Players
        let player = createPlayers(JSON.parse(playersData), ctx, canvas);

        // Handle keydown/up events
        handleKeyDownUp(player);

        // Set for timeLeft
        //let timeLeft = JSON.parse(settings).time;
        let timeLeft = 100;
        let gameStartTime = 0;      // The timestamp when the game starts

        // Set of correct item types
        const correctFruits = new Set(['cake', 'cherry', 'melon', 'orange', 'banana', 'poo', 'sign']);
        const correctItems = new Set(['candy', 'glass', 'timer', 'flake','party']);

        // Candy effect
        let eatCandy = false;

        /* Main processing of the game */
        function doFrame(now) {
            if (gameStartTime === 0) gameStartTime = now;
            /* Update the time remaining */
            const gameTimeSoFar = now - gameStartTime;
            const timeRemaining = Math.ceil((timeLeft * 1000 - gameTimeSoFar) / 1000);
            $('#timer').text('Time: ' + timeRemaining);

            if(timeRemaining <= 0)  {
                clearInterval(doFrame);
                endGame();
                return; 
            } 
            // Play Background Music
            sounds.background.play();
            // Update the canvas size dynamically
            canvas.width = container.width();
            canvas.height = container.height();

            // Update all items
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (let item of items) {
                if (item.sprite().isAnimated()) { // Check if the sprite is animated
                    item.update(now);
                }
                item.move(now, item.getAngle());
                item.draw();
            }

            // Update the player
            player.update(now);
            player.draw();

            // let eatCandy false when 5s ends 
            //const resetEatCandy = () =>{eatCandy = false};
            //let eatCandy = false;

            // Collision detection
            for (let item of items) {
                if (checkCollision(player, item)) {
                    console.log("item: ", item.getItem())

                    // Fruits
                    if (correctFruits.has(item.getItem()) && (item.getScore() !== 0)) {
                        let itemScore = item.getScore();

                        // Negative fruits
                        if (item.getScore() < 0) {
                            console.log("Candy state: ", eatCandy)
                            if (eatCandy){
                                console.log("Candy effect active, negative score ignored")
                                itemScore = 0;
                            } else {
                                sounds.hit.play();
                            }
                        }

                        // Positive fruits
                        else if (item.getScore() > 0) {
                            sounds.food.play();
                        }

                        player.updateScore(itemScore); // update score for all fruits
                        $('#score').text('Score: ' + player.getScore());
                        //item.randomize(canvas);
                    }

                    // Items
                    if (correctItems.has(item.getItem()) && (item.getScore() === 0)) {
                        //if (item.getScore() === 0) sounds.item.play();
                        sounds.item.play();
                        if (item.getItem() === 'candy'){ // implement candy item effect
                            console.log("touched the candy");
                            eatCandy = true;
                            console.log(eatCandy)
                            setTimeout(() => {
                                eatCandy = false
                                console.log("Candy effect ended")
                            }, 5000);

                        }
                        if (item.getItem() === 'timer'){ // implement flake item effect
                            console.log("touched the timer"); 
                            timeLeft += 7; 
                        }
                    }

                    item.randomize(canvas);

                }
            }

            requestAnimationFrame(doFrame);

                          // if (IsCheat || eatCandy){
                        //     if (item.getScore() < 0){
                        //         item.randomize(canvas);
                        //     } else { // allow update of score when isCheat and fruit score > 0
                        //         player.updateScore(item.getScore());
                        //         $('#score').text('Score: ' + player.getScore());
                        //         item.randomize(canvas);
                        //     }
                        // } else {
                        //     player.updateScore(item.getScore());
                        //     $('#score').text('Score: ' + player.getScore());
                        //     item.randomize(canvas);
                        // }
        }

        $(document).ready(function () {
            startCountdown();
            $('#restart-game').click(function () {
                $('#results-box').addClass('hidden');
                $('#game-over').addClass('hidden');
                $('#timer-box').removeClass('hidden');
                $('#score-box').removeClass('hidden');
                $('#game-area').show();
                startCountdown();
            });
        });

        function startCountdown() {
            const countdownElem = $('#countdown');
            let countdown = 3;

            countdownElem.text(countdown);
            $('#game-start').show();
            $('#timer-box').addClass('hidden');
            $('#score-box').addClass('hidden');
            $('#game-over').addClass('hidden');
            $('#results-box').addClass('hidden');
            $('#game-area').hide();

            const countdownInterval = setInterval(() => {
                countdown--;
                if (countdown > 0) {
                    countdownElem.text(countdown);
                } else {
                    countdownElem.text("Game Start!");
                }

                if (countdown < 0) {
                    clearInterval(countdownInterval);
                    $('#game-start').hide();
                    $('#timer-box').removeClass('hidden');
                    $('#score-box').removeClass('hidden');
                    $('#game-area').show();
                    try {
                        sounds.background.play().catch((error) => {
                            console.log("Audio play failed: ", error);
                        });
                    } catch (error) {
                        console.log("Error playing background music: ", error);
                    }
                    requestAnimationFrame(doFrame);
                }
            }, 1000);
        }
        /*
        function startGame() {
            let timeLeft = JSON.parse(settings).time;

            $('#timer').text('Time: ' + timeLeft);
            // Play Background Music
            sounds.background.play();

            const gameInterval = setInterval(() => {
                if (timeLeft <= 0) {
                    clearInterval(gameInterval);
                    endGame();
                } else {
                    timeLeft--;
                    $('#timer').text('Time: ' + timeLeft);
                }
            }, 1000);

            requestAnimationFrame(doFrame);
        }*/

        function endGame() {
            //cancelAnimationFrame(animationFrameId);
            sounds.background.pause();
            sounds.food.pause();
            sounds.hit.pause();
            sounds.item.pause();
            sounds.gameover.play();

            $('#game-over').removeClass('hidden');
            $('#timer-box').addClass('hidden');
            $('#score-box').addClass('hidden');
            $('#game-area').hide();

            setTimeout(() => {
                $('#game-over').addClass('hidden');
                // Show results or other actions here
            }, 5000);
        }

    });
    </script>
</body>
</html>