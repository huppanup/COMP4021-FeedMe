<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title> Welcome! </title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <link href="/stylesheets/game.css" rel="stylesheet">
</head>
<body>
    <div id="container" class="col">
        <canvas id="game-area"></canvas>

        <!-- Game Start Countdown -->
        <div id="game-start" class="center start-text">
            <h1 id="countdown">Game Start!</h1>
        </div>

        <!-- Game Over Text -->
        <div id="game-over" class="center end-text hidden">
            <h1>Game Over</h1>
        </div>

        <!-- Results Table -->
        <div id="results-box" class="center results-text hidden">
            <h2>Results</h2>
            <table id="results-table">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Results will be populated dynamically -->
                </tbody>
            </table>
            <h3 id="winner-text">Winner: </h3>
            <button id="restart-game">Restart</button>
        </div>

        <!-- Timer -->
        <div id="timer-box" class="right-top timer-text hidden">
            <span id="timer">Time: 60</span>
        </div>


    </div>
    <div id="signin-overlay" class="overlay row"></div>

    <script src="/scripts/boundingBox.js"></script>
    <script src="/scripts/sprite.js"></script>
    <script src="/scripts/item.js"></script>
    <script src="/scripts/player.js"></script>
    <script src="/scripts/game.js"></script>
    

    <script>
    const playersData = '<%- JSON.stringify(playersData) %>';
    const settings = '<%- JSON.stringify(settings) %>';
    const user = '<%- JSON.stringify(user) %>';

    $(function() {
        /* Get the canvas and 2D context */
        const canvas = document.getElementById("game-area");
        const ctx = canvas.getContext("2d");

        //set game-area size using container size
        const container = $('#container');
        const gameAreaCanvas = $('#game-area');
        gameAreaCanvas.attr('width', container.width());
        gameAreaCanvas.attr('height', container.height());

        /* Create the items */
        let items = []
        items = createItems(ctx, canvas)

        /* Create Players */
        let players = []
        const gameArea = BoundingBox(ctx, 0, 0, gameAreaCanvas.width, gameAreaCanvas.height);
        players = createPlayers(JSON.parse(playersData), ctx, gameArea);

        /* Main processing of the game */
        function doFrame(now) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            // if (gameStartTime == 0) gameStartTime = now;
            //
            // /* Update the time remaining */
            // const gameTimeSoFar = now - gameStartTime;
            // const timeRemaining = Math.ceil((totalGameTime * 1000 - gameTimeSoFar) / 1000);
            // $("#timer").text(timeRemaining);
            //
            // // Game Over situation
            // if (timeRemaining <= 0) {
            //     // Game Over
            //     endGame()
            // }

            // Update all items
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (let item of items) {
                if (item.sprite().isAnimated()) { // Check if the sprite is animated
                    item.update(now);
                }
                item.move(now, item.getAngle());
                item.draw();
            }

            // Update the player;
            for (let player of players) {
                player.update(now);
                player.draw();
            }

            // Collection detection
            items = items.filter(item => {
                for (let player of players) {
                    if (checkCollision(player, item)) {
                        player.score += item.score;
                        return false;
                    }
                }
                return true;
            })

            requestAnimationFrame(doFrame);
        }


        $(document).ready(function () {
            // //set game-area size using container size
            // const container = $('#container');
            // const gameArea = $('#game-area');
            // gameArea.attr('width', container.width());
            // gameArea.attr('height', container.height());

            startCountdown();
            $('#restart-game').click(function () {
                $('#results-box').addClass('hidden');
                $('#game-over').addClass('hidden');
                $('#timer-box').removeClass('hidden');
                $('#game-area').show();
                startCountdown();
            });
        });

        function startCountdown() {
            const countdownElem = $('#countdown');
            let countdown = 3;

            countdownElem.text(countdown);
            $('#game-start').show();
            $('#timer-box').addClass('hidden');
            $('#game-over').addClass('hidden');
            $('#results-box').addClass('hidden');
            $('#game-area').hide();

            const countdownInterval = setInterval(() => {
                countdown--;
                if (countdown > 0) {
                    countdownElem.text(countdown);
                } else {
                    countdownElem.text("Game Start!");
                }

                if (countdown < 0) {
                    clearInterval(countdownInterval);
                    $('#game-start').hide();
                    $('#timer-box').removeClass('hidden');
                    $('#game-area').show();
                    startGame();
                }
            }, 1000);
        }

        function startGame() {
            let timeLeft = JSON.parse(settings).time;

            $('#timer').text('Time: ' + timeLeft);

            const gameInterval = setInterval(() => {
                if (timeLeft <= 0) {
                    clearInterval(gameInterval);
                    endGame();
                } else {
                    //timeLeft--;
                    $('#timer').text('Time: ' + timeLeft);
                }
            }, 1000);

            requestAnimationFrame(doFrame);
        }


        function endGame() {
            $('#game-over').removeClass('hidden');
            $('#timer-box').addClass('hidden');
            $('#game-area').hide();

            setTimeout(() => {
                $('#game-over').addClass('hidden');
                //showResults();
            }, 2000);
        }



        /* Check if the player ID matches the current user's ID */
        //if (player.id === currentUserID)
        // Keep track of keys currently pressed down
        // let keysDown = {};
        //
        // // Add keydown event listener
        // $(document).on("keydown", function(event) {
        //     // Add key to keysDown object if it's an arrow key
        //     if (event.keyCode >= 37 && event.keyCode <= 40) {
        //         keysDown[event.keyCode] = true;
        //     }
        //
        //     // Check for diagonal movement
        //     if (keysDown[37] && keysDown[38]) { // Up-Left
        //         playerOne.move(5);
        //     } else if (keysDown[38] && keysDown[39]) { // Up-Right
        //         playerOne.move(6);
        //     } else if (keysDown[39] && keysDown[40]) { // Down-Right
        //         playerOne.move(8);
        //     } else if (keysDown[40] && keysDown[37]) { // Down-Left
        //         playerOne.move(7);
        //     } else {
        //         // Handle non-diagonal movement
        //         switch (event.keyCode) {
        //             case 37: // Left
        //                 playerOne.move(1);
        //                 break;
        //             case 38: // Up
        //                 playerOne.move(2);
        //                 break;
        //             case 39: // Right
        //                 playerOne.move(3);
        //                 break;
        //             case 40: // Down
        //                 playerOne.move(4);
        //                 break;
        //         }
        //     }
        // });

        // Add keyup event listener
        // $(document).on("keyup", function(event) {
        //     // Remove key from keysDown object if it's an arrow key
        //     if (event.keyCode >= 37 && event.keyCode <= 40) {
        //         delete keysDown[event.keyCode];
        //     }
        //
        //     // Check for diagonal movement
        //     if (keysDown[37] && keysDown[38]) { // Up-Left
        //         playerOne.move(5);
        //     } else if (keysDown[38] && keysDown[39]) { // Up-Right
        //         playerOne.move(6);
        //     } else if (keysDown[39] && keysDown[40]) { // Down-Right
        //         playerOne.move(7);
        //     } else if (keysDown[40] && keysDown[37]) { // Down-Left
        //         playerOne.move(8);
        //     } else {
        //         // Handle non-diagonal movement
        //         switch (event.keyCode) {
        //             case 37: // Left
        //                 if (!keysDown[37]) playerOne.stop(1);
        //                 if (keysDown[38]) playerOne.move(2);
        //                 if (keysDown[40]) playerOne.move(4);
        //                 break;
        //             case 38: // Up
        //                 if (!keysDown[38]) playerOne.stop(2);
        //                 if (keysDown[37]) playerOne.move(1);
        //                 if (keysDown[39]) playerOne.move(3);
        //                 break;
        //             case 39: // Right
        //                 if (!keysDown[39]) playerOne.stop(3);
        //                 if (keysDown[38]) playerOne.move(2);
        //                 if (keysDown[40]) playerOne.move(4);
        //                 break;
        //             case 40: // Down
        //                 if (!keysDown[40]) playerOne.stop(4);
        //                 if (keysDown[37]) playerOne.move(1);
        //                 if (keysDown[39]) playerOne.move(3);
        //                 break;
        //         }
        //     }
        // });
    }); 
    </script>
</body>
</html>
